#Level-3,Task-1
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.impute import SimpleImputer
data = pd.read_csv(r"E:\internship_dataset.csv")
# Selecting relevant features and target variable
features = ['Average Cost for two', 'Has Table booking', 'Has Online delivery']
target = 'Aggregate rating'
# Checking for missing values in the dataset-if exists
missing_values = data.isnull().sum()
print("Missing values in the dataset:")
print(missing_values)
# Drop rows with missing values in the selected features and target variable
data.dropna(subset=features+[target], inplace=True)
# Converting categorical variables to binary numeric values
data['Has Table booking'] = data['Has Table booking'].map({'Yes': 1, 'No': 0})
data['Has Online delivery'] = data['Has Online delivery'].map({'Yes': 1, 'No': 0})
# Splitting the data into features (X) and target variable (y)
X = data[features]
y = data[target]
# Handling missing values in the features
imputer = SimpleImputer(strategy='mean')
X_imputed = imputer.fit_transform(X)
# Splitting the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)
# Initializing and training the regression model
model = LinearRegression()
model.fit(X_train, y_train)
# Predicting the aggregate ratings for the test set
y_pred = model.predict(X_test)
# Evaluating the model's performance
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("********************************************************")
print("Mean Absolute Error-(MAE):", mae)
print("********************************************************")
print("Mean Squared Error-(MSE):", mse)
print("********************************************************")
print("R-squared -(R2):", r2)


